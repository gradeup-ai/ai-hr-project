import uuid
import requests
from fastapi import APIRouter, HTTPException
from models import SessionLocal, CandidateDB, InterviewDB
from ai_report import generate_report
from google_sheets import save_to_google_sheets
from deepgram import Deepgram
import aiohttp
import os

router = APIRouter()

DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY")


# üìå 1Ô∏è‚É£ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**
@router.post("/register/")
def register(candidate: CandidateDB):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é.
    """
    session = SessionLocal()
    interview_id = str(uuid.uuid4())
    interview_link = f"https://ai-hr-project.onrender.com/interview/{interview_id}"

    new_candidate = CandidateDB(
        id=interview_id,
        name=candidate.name,
        email=candidate.email,
        phone=candidate.phone,
        gender=candidate.gender,
        interview_link=interview_link
    )

    session.add(new_candidate)
    session.commit()
    session.close()

    return {"message": "–ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "interview_link": interview_link}


# üìå 2Ô∏è‚É£ **–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é**
@router.get("/interview/{interview_id}")
def start_interview(interview_id: str):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    """
    session = SessionLocal()
    candidate = session.query(CandidateDB).filter(CandidateDB.id == interview_id).first()
    session.close()

    if not candidate:
        raise HTTPException(status_code=404, detail="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    first_question = "–ü—Ä–∏–≤–µ—Ç! –Ø –≠–º–∏–ª–∏, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π HR. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å", "question": first_question}


# üìå 3Ô∏è‚É£ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ (LiveKit)**
@router.get("/livekit/{interview_id}")
def create_livekit_session(interview_id: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –≤ LiveKit.
    """
    session = SessionLocal()
    candidate = session.query(CandidateDB).filter(CandidateDB.id == interview_id).first()
    session.close()

    if not candidate:
        raise HTTPException(status_code=404, detail="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    headers = {"Authorization": f"Bearer {LIVEKIT_API_KEY}"}
    response = requests.post("https://api.livekit.io/room", headers=headers, json={"name": interview_id})

    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ LiveKit")

    return response.json()


# üìå 4Ô∏è‚É£ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ (Deepgram + OpenAI)**
async def transcribe_audio(audio_url: str):
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é Deepgram.
    """
    if not DEEPGRAM_API_KEY:
        raise HTTPException(status_code=500, detail="Deepgram API key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    deepgram = Deepgram(DEEPGRAM_API_KEY)
    async with aiohttp.ClientSession() as session:
        response = await deepgram.transcription.prerecorded(
            {"url": audio_url},
            {"punctuate": True, "language": "ru"}
        )
        return response["results"]["channels"][0]["alternatives"][0]["transcript"]


@router.post("/interview/{interview_id}/answer")
async def process_answer(interview_id: str, audio_url: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    """
    session = SessionLocal()
    interview = session.query(InterviewDB).filter(InterviewDB.id == interview_id).first()

    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    transcript = await transcribe_audio(audio_url)

    if interview.answers:
        interview.answers += f"\n{transcript}"
    else:
        interview.answers = transcript

    session.commit()
    session.close()

    next_question = generate_next_question(interview_id, transcript)

    return {"next_question": next_question}


# üìå 5Ô∏è‚É£ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–≤—å—é**
@router.post("/interview/{interview_id}/save_video")
def save_interview_video(interview_id: str, video_url: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–≤—å—é.
    """
    session = SessionLocal()
    interview = session.query(InterviewDB).filter(InterviewDB.id == interview_id).first()

    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    interview.video_url = video_url
    session.commit()
    session.close()

    return {"message": "–í–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "video_url": video_url}


# üìå 6Ô∏è‚É£ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞**
@router.post("/interview/{interview_id}/finish")
def finish_interview(interview_id: str):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é, —Å–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ Google Sheets.
    """
    session = SessionLocal()
    interview = session.query(InterviewDB).filter(InterviewDB.id == interview_id).first()

    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ AI-HR
    report = generate_report(interview_id)
    interview.report = report

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
    save_to_google_sheets([
        interview.id,
        interview.candidate_id,
        interview.status,
        interview.questions if interview.questions else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        interview.answers if interview.answers else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        report,
        interview.video_url if interview.video_url else "–í–∏–¥–µ–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ"
    ])

    interview.status = "completed"
    session.commit()
    session.close()

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"}
