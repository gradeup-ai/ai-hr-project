import os
import uuid
import requests
import aiohttp
import uvicorn
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from sqlalchemy.orm import Session
from database import engine, Base, SessionLocal
from models import CandidateDB, InterviewDB
from schemas import CandidateCreate, CandidateResponse, InterviewResponse
from ai_report import generate_report
from google_sheets import save_interview_to_google_sheets
from deepgram import Deepgram
from openai import OpenAI
from send_email import send_interview_email  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AI-HR Interview System",
    description="–°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å AI-HR –≠–º–∏–ª–∏",
    version="1.0.0"
)

# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ CORS (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã (GET, POST, PUT, DELETE)
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# API –∫–ª—é—á–∏
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
EMAIL_API_KEY = os.getenv("EMAIL_API_KEY")  # –î–æ–±–∞–≤–ª–µ–Ω API –∫–ª—é—á –¥–ª—è email
client = OpenAI(api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üìå **–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞**
@app.get("/", response_class=HTMLResponse)
def root():
    return "<h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-HR Interview System!</h1><p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href='/docs'>/docs</a> –¥–ª—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.</p>"

# üìå **1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ + –û—Ç–ø—Ä–∞–≤–∫–∞ email**
@app.post("/register/", response_model=CandidateResponse)
def register(candidate: CandidateCreate, db: Session = Depends(get_db)):
    interview_id = str(uuid.uuid4())
    interview_link = f"https://ai-hr-frontend.vercel.app/interview/{interview_id}"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç

    new_candidate = CandidateDB(
        id=interview_id,
        name=candidate.name,
        email=candidate.email,
        phone=candidate.phone,
        gender=candidate.gender,
        interview_link=interview_link
    )

    db.add(new_candidate)
    db.commit()
    db.refresh(new_candidate)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    try:
        send_interview_email(candidate.email, interview_link)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

    return CandidateResponse(
        id=new_candidate.id,
        name=new_candidate.name,
        email=new_candidate.email,
        phone=new_candidate.phone,
        gender=new_candidate.gender,
        interview_link=new_candidate.interview_link
    )

# üìå **2Ô∏è‚É£ –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é**
@app.get("/interview/{interview_id}", response_model=InterviewResponse)
def start_interview(interview_id: str, db: Session = Depends(get_db)):
    candidate = db.query(CandidateDB).filter(CandidateDB.id == interview_id).first()
    if not candidate:
        raise HTTPException(status_code=404, detail="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    first_question = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.name}! –Ø ‚Äî –≠–º–∏–ª–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π HR. "
        f"–ú—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é. "
        f"–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞. "
        f"–û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ—è—Å–Ω–æ ‚Äì –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω—è! "
        f"–ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
    )

    interview = InterviewDB(
        id=interview_id,
        candidate_id=candidate.id,
        status="in_progress",
        questions=first_question
    )
    db.add(interview)
    db.commit()
    db.refresh(interview)

    return InterviewResponse(
        id=interview.id,
        candidate_id=interview.candidate_id,
        status=interview.status,
        questions=interview.questions,
        answers=interview.answers,
        report=interview.report
    )

# üìå **3Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Deepgram)**
async def transcribe_audio(audio_url: str):
    if not DEEPGRAM_API_KEY:
        raise HTTPException(status_code=500, detail="Deepgram API key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    deepgram = Deepgram(DEEPGRAM_API_KEY)
    async with aiohttp.ClientSession() as session:
        response = await deepgram.transcription.prerecorded(
            {"url": audio_url},
            {"punctuate": True, "language": "ru"}
        )
        return response["results"]["channels"][0]["alternatives"][0]["transcript"]

@app.post("/interview/{interview_id}/answer")
async def process_answer(interview_id: str, audio_url: str, db: Session = Depends(get_db)):
    interview = db.query(InterviewDB).filter(InterviewDB.id == interview_id).first()
    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    transcript = await transcribe_audio(audio_url)
    interview.answers = (interview.answers or "") + f"\n{transcript}"
    db.commit()
    db.refresh(interview)

    return {"message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "answer": transcript}

# üìå **4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞**
@app.post("/interview/{interview_id}/finish")
def finish_interview(interview_id: str, db: Session = Depends(get_db)):
    interview = db.query(InterviewDB).filter(InterviewDB.id == interview_id).first()
    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report = generate_report(interview_id)
    interview.report = report
    interview.status = "completed"
    db.commit()
    db.refresh(interview)

    save_interview_to_google_sheets(interview.id, interview.candidate_id, interview.status, interview.questions, interview.answers, report, interview.video_url)

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"}

# üìå **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)

