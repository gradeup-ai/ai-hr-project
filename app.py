import os
import smtplib
import uuid
from email.mime.text import MIMEText
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from deepgram import Deepgram
import aiohttp
import requests
from openai import OpenAI

app = FastAPI()

# 1Ô∏è‚É£ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.yandex.ru")
SMTP_PORT = int(os.getenv("SMTP_PORT", "465"))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

# 2Ô∏è‚É£ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
import json

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CANDIDATES_FILE = "candidates.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_candidates():
    try:
        with open(CANDIDATES_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_candidates():
    with open(CANDIDATES_FILE, "w", encoding="utf-8") as file:
        json.dump(candidates_db, file, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
candidates_db = load_candidates()
interviews = {}

# 3Ô∏è‚É£ –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
class Candidate(BaseModel):
    name: str
    email: str
    phone: str
    gender: str

# 4Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
def send_email(to_email, interview_link):
    if not SMTP_SERVER or not SMTP_USER or not SMTP_PASSWORD:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞: SMTP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!")

    subject = "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é"
    body = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {interview_link}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, AI-HR."

    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = SMTP_USER
    msg["To"] = to_email

    try:
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.sendmail(SMTP_USER, to_email, msg.as_string())
        server.quit()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")

# 5Ô∏è‚É£ API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
@app.post("/register/")
def register(candidate: Candidate):
    interview_id = str(uuid.uuid4())
    interview_link = f"https://ai-hr-project.onrender.com/interview/{interview_id}"

candidates_db[interview_id] = {
    "name": candidate.name,
    "email": candidate.email,
    "phone": candidate.phone,
    "gender": candidate.gender,
    "interview_link": interview_link
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
save_candidates()


    send_email(candidate.email, interview_link)

    return {"message": "–ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "interview_link": interview_link}

# 6Ô∏è‚É£ API –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
@app.get("/interview/{interview_id}")
def start_interview(interview_id: str):
    if interview_id not in candidates_db:
        raise HTTPException(status_code=404, detail="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    candidate = candidates_db[interview_id]
    interviews[interview_id] = {
        "candidate": candidate,
        "questions": [],
        "answers": [],
        "status": "in_progress"
    }
    
    first_question = "–ü—Ä–∏–≤–µ—Ç! –Ø –≠–º–∏–ª–∏, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π HR. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
    interviews[interview_id]["questions"].append(first_question)

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å", "question": first_question}

# 7Ô∏è‚É£ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (Deepgram STT)
async def transcribe_audio(audio_url: str):
    if not DEEPGRAM_API_KEY:
        raise HTTPException(status_code=500, detail="Deepgram API key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    deepgram = Deepgram(DEEPGRAM_API_KEY)
    async with aiohttp.ClientSession() as session:
        response = await deepgram.transcription.prerecorded(
            {"url": audio_url},
            {"punctuate": True, "language": "ru"}
        )
        return response["results"]["channels"][0]["alternatives"][0]["transcript"]

@app.post("/interview/{interview_id}/answer")
async def process_answer(interview_id: str, audio_url: str):
    if interview_id not in interviews:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    transcript = await transcribe_audio(audio_url)
    interviews[interview_id]["answers"].append(transcript)

    question = generate_next_question(interview_id, transcript)
    interviews[interview_id]["questions"].append(question)

    return {"question": question}

# 8Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (GPT-4o)
def generate_next_question(interview_id, last_answer):
    candidate = interviews[interview_id]["candidate"]

    prompt = f"""
–¢—ã ‚Äì AI-HR –≠–º–∏–ª–∏. –¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º {candidate['name']} –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é.
–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ Hard –∏ Soft Skills, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –µ–≥–æ –æ—Ç–≤–µ—Ç—ã.

1. –û—Ü–µ–Ω–∏ –µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ **–∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤** (Hard Skills), —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π.
2. –ü—Ä–æ–≤–µ—Ä—è–π **Soft Skills**: —É–º–µ–Ω–∏–µ –∏–∑–ª–∞–≥–∞—Ç—å –º—ã—Å–ª–∏, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å.
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞, —É–≥–ª—É–±–ª—è—è –æ—Ü–µ–Ω–∫—É –Ω–∞–≤—ã–∫–æ–≤.
4. –ù–µ –¥–∞–≤–∞–π –ø–æ–¥—Å–∫–∞–∑–∫–∏. –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥.

–ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–≤–µ—Ç–∏–ª: "{last_answer}".  
–ö–∞–∫–æ–π –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –µ–≥–æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏?
"""


    response = client.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": "–¢—ã ‚Äì AI-HR, –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."},
                  {"role": "user", "content": prompt}]
    )

    return response.choices[0].message["content"]

# 9Ô∏è‚É£ API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ç—á—ë—Ç–∞
@app.post("/interview/{interview_id}/finish")
def finish_interview(interview_id: str):
    if interview_id not in interviews:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report = generate_report(interview_id)
    interviews[interview_id]["status"] = "finished"

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "report": report}

# üîü –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ (GPT-4o)
def generate_report(interview_id):
    candidate = interviews[interview_id]["candidate"]
    questions = interviews[interview_id]["questions"]
    answers = interviews[interview_id]["answers"]

    prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π **–¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç** –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º {candidate['name']}.

üìå **1. –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**
- –ò–º—è: {candidate['name']}
- Email: {candidate['email']}
- –¢–µ–ª–µ—Ñ–æ–Ω: {candidate['phone']}
- –ü–æ–ª: {candidate['gender']}

üìå **2. –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã**  
**–í–æ–ø—Ä–æ—Å—ã** {questions}  
**–û—Ç–≤–µ—Ç—ã** {answers}  

üìå **3. –û—Ü–µ–Ω–∫–∞ Hard Skills (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏)**  
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏.
- –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ **5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ** —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.  
- –î–∞–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–º –Ω–∞–≤—ã–∫–æ–º.

üìå **4. –û—Ü–µ–Ω–∫–∞ Soft Skills (–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞)**  
- –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è—Å–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –≤—ã—Ä–∞–∂–∞–µ—Ç –º—ã—Å–ª–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç.  
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ: –æ—Ü–µ–Ω–∏ –≥–ª—É–±–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á.  
- –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.  
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å–ø–æ—Å–æ–±–µ–Ω –ª–∏ –æ–Ω —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ —á—ë—Ç–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.  
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é: –∫–∞–∫ –æ–Ω –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤—ã–º —Ç–µ–º–∞–º.

üìå **5. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ —Ä–µ—á–∏ (Emotion AI)**  
- –û–ø—Ä–µ–¥–µ–ª–∏ **–¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ** –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–µ—Ä–≤–æ–∑–Ω—ã–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π.  
- –ö–∞–∫ –º–µ–Ω—è–ª–∏—Å—å –µ–≥–æ **—ç–º–æ—Ü–∏–∏ –≤ —Ö–æ–¥–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è**?  
- –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –±—ã–ª–∏ –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–ª–Ω–µ–Ω–∏—è, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏?  
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π **—Ç–µ–º–ø, –≥—Ä–æ–º–∫–æ—Å—Ç—å, –ø–∞—É–∑—ã –≤ —Ä–µ—á–∏** –∏ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ.  

üìå **6. –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç AI-HR**  
- –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç? **–î–∞ / –ù–µ—Ç** (–∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥).  
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.  
- –ó–æ–Ω—ã —Ä–æ—Å—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.  
"""


    response = client.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": "–¢—ã ‚Äì AI-HR, —Å–æ–∑–¥–∞—ë—à—å –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é."},
                  {"role": "user", "content": prompt}]
    )

    return response.choices[0].message["content"]

# 1Ô∏è‚É£1Ô∏è‚É£ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
@app.get("/")
def home():
    return {"message": "AI-HR API —Ä–∞–±–æ—Ç–∞–µ—Ç!"}
