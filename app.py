import uuid
import requests
import os
import aiohttp
from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from models import SessionLocal, CandidateDB, InterviewDB
from schemas import CandidateCreate, CandidateResponse, InterviewResponse
from ai_report import generate_report
from google_sheets import save_interview_to_google_sheets
from deepgram import Deepgram
from openai import OpenAI

router = APIRouter()

DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üì∫ 1Ô∏è‚É£ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞**
@router.post("/register/", response_model=CandidateResponse)
def register(candidate: CandidateCreate, db: Session = Depends(get_db)):
    interview_id = str(uuid.uuid4())
    interview_link = f"https://ai-hr-project.onrender.com/interview/{interview_id}"

    new_candidate = CandidateDB(
        id=interview_id,
        name=candidate.name,
        email=candidate.email,
        phone=candidate.phone,
        gender=candidate.gender,
        interview_link=interview_link
    )

    db.add(new_candidate)
    db.commit()
    db.refresh(new_candidate)

    return CandidateResponse(
        id=new_candidate.id,
        name=new_candidate.name,
        email=new_candidate.email,
        phone=new_candidate.phone,
        gender=new_candidate.gender,
        interview_link=new_candidate.interview_link
    )


# üì∫ 2Ô∏è‚É£ **–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é**
@router.get("/interview/{interview_id}", response_model=InterviewResponse)
def start_interview(interview_id: str, db: Session = Depends(get_db)):
    candidate = db.query(CandidateDB).filter(CandidateDB.id == interview_id).first()
    if not candidate:
        raise HTTPException(status_code=404, detail="–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    first_question = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate.name}! –Ø ‚Äî –≠–º–∏–ª–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π HR. "
        f"–ú—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é. "
        f"–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞. "
        f"–û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ—è—Å–Ω–æ ‚Äì –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω—è! "
        f"–ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
    )

    interview = InterviewDB(
        id=interview_id,
        candidate_id=candidate.id,
        status="in_progress",
        questions=first_question
    )
    db.add(interview)
    db.commit()
    db.refresh(interview)

    return InterviewResponse(
        id=interview.id,
        candidate_id=interview.candidate_id,
        status=interview.status,
        questions=interview.questions,
        answers=interview.answers,
        report=interview.report
    )

# üì∫ 3Ô∏è‚É£ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞**
async def transcribe_audio(audio_url: str):
    if not DEEPGRAM_API_KEY:
        raise HTTPException(status_code=500, detail="Deepgram API key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    deepgram = Deepgram(DEEPGRAM_API_KEY)
    async with aiohttp.ClientSession() as session:
        response = await deepgram.transcription.prerecorded(
            {"url": audio_url},
            {"punctuate": True, "language": "ru"}
        )
        return response["results"]["channels"][0]["alternatives"][0]["transcript"]


@router.post("/interview/{interview_id}/answer")
async def process_answer(interview_id: str, audio_url: str, db: Session = Depends(get_db)):
    interview = db.query(InterviewDB).filter(InterviewDB.id == interview_id).first()
    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    transcript = await transcribe_audio(audio_url)
    interview.answers = (interview.answers or "") + f"\n{transcript}"
    db.commit()
    db.refresh(interview)

    return {"message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "answer": transcript}


# üì∫ 4Ô∏è‚É£ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–≤—å—é**
@router.post("/interview/{interview_id}/save_video")
def save_interview_video(interview_id: str, video_url: str, db: Session = Depends(get_db)):
    interview = db.query(InterviewDB).filter(InterviewDB.id == interview_id).first()
    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    interview.video_url = video_url
    db.commit()
    db.refresh(interview)

    return {"message": "–í–∏–¥–µ–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "video_url": video_url}


# üì∫ 5Ô∏è‚É£ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞**
@router.post("/interview/{interview_id}/finish")
def finish_interview(interview_id: str, db: Session = Depends(get_db)):
    interview = db.query(InterviewDB).filter(InterviewDB.id == interview_id).first()
    if not interview:
        raise HTTPException(status_code=404, detail="–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    report = generate_report(interview_id)
    interview.report = report
    interview.status = "completed"
    db.commit()
    db.refresh(interview)

    save_interview_to_google_sheets(interview.id, interview.candidate_id, interview.status, interview.questions, interview.answers, report, interview.video_url)

    return {"message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"}
